;; Q1
;; シンボル x を返す関数を定義したい。
;; 以下はその実装だが、実行時にエラーが出る。
;; エラーの意味とその理由を答え、正しく動作するように再定義せよ。
(defun p01 ()
  x)

;; Q2
;; リスト (1 2 3) を返す関数を定義したい。
;; 以下はその実装だが、実行時にエラーが出る。
;; エラーの意味とその理由を答え、正しく動作するように再定義せよ。
(defun p02 ()
  (1 2 3))

;; Q3
;; リスト (1 2 3) を返す関数を定義したい。
;; 以下はその実装だが、期待通りの結果を返さない。
;; その理由を答え、「関数」を使って正しく動作するように再定義せよ。
(defun p03 ()
  1 2 3)

;; Q4
;; リスト (1 (2 3) 4) を返す関数を定義したい。
;; 以下はその実装だが、実行時にエラーが出る。
;; エラーの意味とその理由を答え、正しく動作するように再定義せよ。
(defun p04 ()
  (list 1 (2 3) 4))

;; Q5
;; リスト (2 3 4) に 1 を加え、 (1 2 3 4) を返す関数を定義したい。
;; 以下は途中まで実装したものである。空欄を埋めて完成させよ。
(defun p05 ()
  (____ 1 '(2 3 4)))

;; Q6
;; リスト (4) を返す関数を定義したい。
;; 以下は途中まで実装したものである。空欄を埋めて完成させよ。
(defun p06 ()
  (____ 4 ___))

;; Q7
;; リスト (3 4) を返す関数を定義したい。
;; 以下は途中まで実装したものである。空欄を埋めて完成させよ。
(defun p07 ()
  (____ 3 (____ 4 ___)))

;; Q8
;; 数値のリストを返す関数を定義したい。
;; 以下はその実装だが、期待通りの結果が得られない。
;; その理由を答え、正しく動作するよう書き直せ。
;; ex. (p08 1 2 3 4) => (3 7)
(defun p08 (a b c d)
  '((+ a b) (+ c d)))

;; Q9
;; 与えられた数 x が 0 であれば t を返す関数を定義したい。
;; 以下はその実装だが、実行時にエラーが出る。
;; その理由を答え、正しく動作するよう書き直せ。
(defun p09 (x)
  (if (x = 0)
      t))

;; Q10
;; 与えられた数 x が 1 以上であれば t を返す関数を定義したい。
;; 以下はその実装だが、実行時にエラーが出る。
;; その理由を答え、正しく動作するよう書き直せ。
(defun p10 (x)
  (if (> x 0)))

;; Q11
;; 与えられた数 x が 30 未満であれば low, 60 未満であれば mid,
;; それ以外であれば high を返す関数を定義したい。
;; 空欄を埋めて完成させよ。
(defun p11 (x)
  (__ (< x 30)
      ____
      (__ (< x 60)
          ____
          _____)))

;; Q12
;; Q11の関数を `cond' を使って定義したい。
;; 以下はその実装だが、実行時にエラーが出る。
;; その理由を答え、正しく動作するよう書き直せ。
(defun p12 (x)
  (cond
    (> x 30)
    'low

    (> x 60)
    'mid

    t
    'high))

;; Q13
;; 与えられた数 x が正の数であり、かつ偶数であれば t を返す関数を定義したい。
;; 空欄を埋めて定義を完成させよ。
(defun p13 (x)
  (___ (plusp x)
       (evenp x)))

;; Q14
;; 与えられた数 x が正の数であり、かつ偶数であれば pos-even を返す関数を定義したい。
;; 空欄を埋めて定義を完成させよ。
(defun p14 (x)
  (___ (p13 x) _________))

;; Q15
;; 与えられた数 x が 1 以上であれば pos, -1 以下であれば neg,
;; 0 であれば zero を返す関数を定義したい。
;; `if' を使って実装せよ。
;; 参考: Q11
(defun p15 (x)
  )

;; Q16
;; Q15 を `cond' を使って実装せよ。
;; 参考: Q12
(defun p16 (x)
  )

;; Q17
;; 与えられた数 x, y がいずれも正の数であるか、
;; またはいずれも負の数である場合に both を返し、
;; それ以外の場合には neither を返す関数を定義したい。
;; 空欄を埋めて定義を完成させよ。
(defun p17 (x y)
  (if (__ (___ (plusp x)
               (plusp y))
          (___ (minusp x)
               (minusp y)))
      _____
      ________))

;; Q18
;; Q17の条件に「x, y がいずれも 0 である場合」を追加し、
;; その場合は 'zero を返すよう、空欄を埋めて再定義せよ。
(defun p18 (x y)
  (cond
    ((___ (zerop x)
          (zerop y))
     _____)

    ((___ (plusp x)
          (plusp y))
     _____)

    ((___ (minusp x)
          (minusp y))
     ________)

    (_
     _____)))

;; Q19
;; Q18にさらに条件「x が 1, y が 9 である場合」を追加し、
;; その場合は 10 を返すよう再定義せよ。
(defun p19 (x y)
  )

;; Q20
;; 与えられた数 x が 10 以上なら over,
;; 10 未満なら under を返す関数がある。以下はその実装だが、
;; 特定の状況下で予期しない値を返す場合がある。
;; それはどのような場合か、なぜそうなるのかを答え、修正して再定義せよ。
(defun p20 (x)
  (cond
    ((< 10 x) 'over)
    ((> 10 x) 'under)))

;; Q21
;; 以下の関数はどういった動作をするものか説明せよ。
(defun p21 (x)
  (cond ((zerop (rem x 15)) 'fizzbuzz)
        ((zerop (rem x 5)) 'buzz)
        ((zerop (rem x 3)) 'fizz)
        (t x)))
